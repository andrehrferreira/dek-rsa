{"version":3,"sources":["../src/index.js"],"names":["env","process","fs","existsSync","path","join","cwd","key","RSA","readFileSync","importKey","b","writeFileSync","exportKey","DEBUG","console","log","$","set","e","message","reject"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;;;0EAEe;AAAA;AAAA;AAAA;AAAA;AAAA;AACX,wBAAG;AACKA,2BADL,GACWC,QAAQD,GADnB;;;AAGC,4BAAGE,aAAGC,UAAH,CAAcC,eAAKC,IAAL,CAAUJ,QAAQK,GAAR,EAAV,EAAyB,iBAAzB,CAAd,CAAH,EAA+D;AACvDC,+BADuD,GACjD,IAAIC,iBAAJ,CAAQN,aAAGO,YAAH,CAAgBL,eAAKC,IAAL,CAAUJ,QAAQK,GAAR,EAAV,EAAyB,iBAAzB,CAAhB,CAAR,EAAsE,mBAAtE,CADiD;;AAE3DC,gCAAIG,SAAJ,CAAcR,aAAGO,YAAH,CAAgBL,eAAKC,IAAL,CAAUJ,QAAQK,GAAR,EAAV,EAAyB,oBAAzB,CAAhB,CAAd,EAA+E,kBAA/E;AACH,yBAHD,MAII;AACIC,+BADJ,GACU,IAAIC,iBAAJ,CAAQ,EAAEG,GAAG,IAAL,EAAR,CADV;;AAEAT,yCAAGU,aAAH,CAAiBR,eAAKC,IAAL,CAAUJ,QAAQK,GAAR,EAAV,EAAyB,oBAAzB,CAAjB,EAAiEC,IAAIM,SAAJ,CAAc,kBAAd,CAAjE;AACAX,yCAAGU,aAAH,CAAiBR,eAAKC,IAAL,CAAUJ,QAAQK,GAAR,EAAV,EAAyB,iBAAzB,CAAjB,EAA8DC,IAAIM,SAAJ,CAAc,mBAAd,CAA9D;AACH;;AAED,4BAAGZ,QAAQD,GAAR,CAAYc,KAAZ,IAAqB,MAAxB,EACIC,QAAQC,GAAR;;AAEJC,iCAAEC,GAAF,CAAM,KAAN,EAAaX,GAAb;AACH,qBAjBD,CAkBA,OAAMY,CAAN,EAAQ;AACJJ,gCAAQC,GAAR,gBAAyBG,EAAEC,OAA3B;AACAC;AACH;;AAtBU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C","file":"index.js","sourcesContent":["import fs from \"fs\";\nimport path from \"path\";\nimport RSA from \"node-rsa\";\nimport { $ } from \"@dekproject/scope\";\n\nexport default async () => {\n    try{\n        let env = process.env;\n\n        if(fs.existsSync(path.join(process.cwd(), \"application.key\"))) {\n            var key = new RSA(fs.readFileSync(path.join(process.cwd(), \"application.key\")), \"pkcs8-private-pem\");\n            key.importKey(fs.readFileSync(path.join(process.cwd(), \"application.public\")), \"pkcs8-public-pem\");\n        }\n        else{\n            var key = new RSA({ b: 1024 });\n            fs.writeFileSync(path.join(process.cwd(), \"application.public\"), key.exportKey(\"pkcs8-public-pem\"));\n            fs.writeFileSync(path.join(process.cwd(), \"application.key\"), key.exportKey(\"pkcs8-private-pem\"));\n        }\n\n        if(process.env.DEBUG == 'true')\n            console.log(`[ RSA ] - RSA successfully signed`);\n\n        $.set(\"rsa\", key);\n    }\n    catch(e){\n        console.log(`[ RSA ] - ${e.message}`);\n        reject();\n    }\n}\n"]}